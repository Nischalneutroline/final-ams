// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------- MODELS

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  name       String
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastActive DateTime @default(now())
  role       Role     @default(USER)
  isActive   Boolean  @default(true)

  appointments  Appointment[] @relation("BookedUser") // Appointments made by this user
  bookings      Appointment[] @relation("BookedBy") // Appointments booked by this user for others
  adminBookings Appointment[] @relation("CreatedBy")

  address Address? // One-to-One Relation (Handled by Address model)

  FAQ    FAQ[]
  Ticket Ticket[]
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  city    String
  country String
  zipCode String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @unique // Foreign key linking to User
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

// --------- Service

model Service {
  id                  String                @id @default(cuid())
  title               String
  description         String
  createdAt           DateTime              @default(now())
  status              Status                @default(ACTIVE)
  estimatedDuration   Int // Store duration in minutes (e.g., 60 for 1 hour)
  serviceAvailability ServiceAvailability[]
  appointments        Appointment[] // select all the appointments for reminders
  reminders           Reminder[] // Fixed typo from "eminders"
  resources           Resource[]

  BusinessDetail   BusinessDetail? @relation(fields: [businessDetailId], references: [id])
  businessDetailId String?
}

model ServiceAvailability {
  id        String        @id @default(cuid())
  service   Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String
  weekDay   WeekDays
  timeSlots ServiceTime[]
}

model ServiceTime {
  id                    String              @id @default(cuid())
  serviceAvailability   ServiceAvailability @relation(fields: [serviceAvailabilityId], references: [id], onDelete: Cascade)
  serviceAvailabilityId String
  startTime             DateTime
  endTime               DateTime
}

enum Status {
  ACTIVE
  INACTIVE
}

enum WeekDays {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

// -------- Notification & Reminders

enum ReminderType {
  REMINDER // Reminder before appointment
  FOLLOW_UP // After appointment (e.g., feedback, check-in)
  CANCELLATION // After appointment (e.g., cancellation confirmation)
  MISSED // After appointment (e.g., missed appointment)
  CUSTOM // Flexible (could be before or after, defined by admin)
}


enum NotificationMethod {
  SMS
  EMAIL
  PUSH
}

model Reminder {
  id             String           @id @default(cuid())
  type           ReminderType
  title          String
  description    String?
  message        String?
  services       Service[]
  notifications  Notification[]
  reminderOffset ReminderOffset[]
}

model ReminderOffset {
  id          String   @id @default(cuid())
  sendOffset  Int // The offset in minutes (e.g., 2880 for 48 hours)
  scheduledAt DateTime // The actual time for this reminder
  sendBefore  Boolean // True for reminders before the appointment, false for after
  sent        Boolean  @default(false) // Tracks if this offset has been sent
  reminder    Reminder @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  reminderId  String
}

model Notification {
  id         String             @id @default(cuid())
  method     NotificationMethod // Method of notification (SMS, EMAIL, PUSH)
  reminderId String
  reminder   Reminder           @relation(fields: [reminderId], references: [id], onDelete: Cascade)
}

// ------ Appointments

model Appointment {
  id           String            @id @default(cuid())
  customerName String
  email        String
  phone        String
  status       AppointmentStatus @default(SCHEDULED)

  userId       String?
  user         User?     @relation("BookedUser", fields: [userId], references: [id])
  bookedById   String?
  bookedBy     User?     @relation("BookedBy", fields: [bookedById], references: [id])
  service      Service   @relation(fields: [serviceId], references: [id])
  serviceId    String
  selectedDate DateTime
  selectedTime DateTime
  message      String?
  isForSelf    Boolean   @default(true)
  createdBy    User      @relation("CreatedBy", fields: [createdById], references: [id])
  createdById  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Resource     Resource? @relation(fields: [resourceId], references: [id])
  resourceId   String?
}

// Appointment Status 
enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  MISSED
  CANCELLED
  FOLLOW_UP
}

// -------- Announcement 

model AnnouncementOrOffer {
  id          String  @id @default(cuid())
  title       String
  description String?
  message     String?

  audience    TargetAudience
  isImmediate Boolean        @default(true)
  scheduledAt DateTime
  showOn      Showon

  expiredAt ExpirationDuration @default(THIRTY_DAYS)

  createdAt DateTime @default(now())
}

enum Showon {
  BANNER
  PUSH
  EMAIL
  ALL
}

enum TargetAudience {
  ALL
  APPOINTED_USERS
  CANCELLED_USERS
}

enum ExpirationDuration {
  ONE_DAY
  THREE_DAYS
  SEVEN_DAYS
  THIRTY_DAYS
  NEVER
}

// Business Details

model BusinessDetail {
  id                         String            @id @default(cuid())
  name                       String
  industry                   String
  email                      String            @unique
  phone                      String
  website                    String?
  address                    BusinessAddress[]
  businessRegistrationNumber String
  status                     BusinessStatus    @default(PENDING)

  businessAvailability BusinessAvailability[]
  holiday              Holiday[]

  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  supportBusinessDetail SupportBusinessDetail?
  resources             Resource[]
  services              Service[]
}

model BusinessAddress {
  id         String                 @id @default(cuid())
  street     String
  city       String
  country    String
  zipCode    String
  googleMap  String
  business   BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String?
  support    SupportBusinessDetail? @relation(fields: [supportId], references: [id], onDelete: Cascade)
  supportId  String?
}

model BusinessAvailability {
  id                      String                 @id @default(cuid())
  business                BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId              String?
  weekDay                 WeekDays
  type                    AvailabilityType       @default(GENERAL)
  timeSlots               BusinessTime[]
  SupportBusinessDetail   SupportBusinessDetail? @relation(fields: [supportBusinessDetailId], references: [id], onDelete: Cascade)
  supportBusinessDetailId String?
}

enum AvailabilityType {
  GENERAL
  SUPPORT
}

model BusinessTime {
  id                     String               @id @default(cuid())
  businessAvailability   BusinessAvailability @relation(fields: [businessAvailabilityId], references: [id], onDelete: Cascade)
  businessAvailabilityId String
  startTime              DateTime
  endTime                DateTime
}

model Holiday {
  id                      String                 @id @default(cuid())
  business                BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId              String?
  holiday                 WeekDays
  type                    HolidayType            @default(GENERAL)
  date                    DateTime?
  SupportBusinessDetail   SupportBusinessDetail? @relation(fields: [supportBusinessDetailId], references: [id])
  supportBusinessDetailId String?
}

enum HolidayType {
  GENERAL
  SUPPORT
}

enum BusinessStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

// ------- Support and Help

model SupportBusinessDetail {
  id                  String                 @id @default(cuid())
  supportBusinessName String
  supportEmail        String                 @unique
  supportPhone        String
  supportGoogleMap    String?
  supportAvailability BusinessAvailability[]
  supportHoliday      Holiday[]
  supportAddress      BusinessAddress[]

  business   BusinessDetail @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String         @unique
}

//----- FAQ

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String?
  isActive  Boolean  @default(true)
  order     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastUpdatedById String
  User            User   @relation(fields: [createdById], references: [id])
  createdById     String
}

// -- Ticket

model Ticket {
  id                String       @id @default(cuid())
  userType          Role
  subject           String
  ticketDescription String
  category          String
  priority          Priority     @default(MEDIUM)
  status            TicketStatus @default(OPEN)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  assignedTo            String?
  resolutionDescription String?
  proofFiles            String?

  initiatedById String?
  userId        String
  user          User    @relation(fields: [userId], references: [id])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// -------- Resources

model Resource {
  id         String         @id @default(cuid())
  name       String
  email      String         @unique
  phone      String
  role       String
  address    String?
  businessId String
  business   BusinessDetail @relation(fields: [businessId], references: [id], onDelete: Cascade)

  services     Service[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
